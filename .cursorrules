# Cursor Rules для Laravel проекта

## Системная информация
- Операционная система: Windows 10
- Версия PHP: 8.1
- Фреймворк: Laravel
- SCSS компилируется автоматически в данном проекте

## Основные принципы разработки

### PHP и Laravel
- Используйте строгую типизацию PHP 8.1 (declare(strict_types=1))
- Следуйте PSR-12 стандартам кодирования
- Используйте современные возможности PHP 8.1 (match expressions, named arguments, etc.)
- Применяйте принципы SOLID
- Используйте dependency injection
- Пишите тесты для критической логики

### Laravel специфика
- Используйте Eloquent ORM для работы с базой данных
- Применяйте Resource классы для API ответов
- Используйте Form Request для валидации
- Следуйте Laravel naming conventions
- Используйте middleware для обработки запросов
- Применяйте Service Pattern для бизнес-логики

### Структура кода
- Контроллеры должны быть тонкими (только обработка HTTP запросов)
- Бизнес-логика выносится в Service классы
- Используйте Repository Pattern для работы с данными
- Применяйте Event/Listener для асинхронных операций
- Используйте Queue для тяжелых операций

### Безопасность
- Всегда валидируйте пользовательский ввод
- Используйте CSRF защиту
- Применяйте proper authentication и authorization
- Используйте prepared statements (Eloquent делает это автоматически)
- Храните секретные данные в .env файле

### Производительность
- Используйте eager loading для предотвращения N+1 проблем
- Применяйте кэширование где это уместно
- Оптимизируйте запросы к базе данных
- Используйте lazy loading для тяжелых ресурсов

### Frontend (SCSS)
- SCSS компилируется автоматически
- Используйте переменные для цветов, размеров, шрифтов
- Применяйте миксины для повторяющихся стилей
- Следуйте BEM методологии
- Организуйте стили по компонентам

### Git и версионирование
- Используйте semantic commit messages
- Создавайте feature branches для новых функций
- Пишите понятные commit сообщения на русском языке
- Не коммитьте .env файлы и vendor директорию

### Документация
- Комментируйте сложную бизнес-логику
- Используйте PHPDoc для методов и классов
- Документируйте API endpoints
- Создавайте README для новых компонентов

### Тестирование
- Пишите unit тесты для Service классов
- Создавайте feature тесты для API endpoints
- Используйте factories для тестовых данных
- Применяйте mocking для внешних зависимостей

### Отладка и логирование
- Используйте Laravel Log для важных событий
- Применяйте debugbar в development окружении
- Используйте proper error handling
- Логируйте критические операции

## Специфичные для проекта правила
- Проект использует Laravel Sanctum для API аутентификации
- Все API endpoints должны возвращать JSON
- Используйте Resource классы для форматирования ответов
- Применяйте API Resource для трансформации данных
